package com.imureader;
import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.Random;

import javax.comm.CommPortIdentifier;
import javax.comm.PortInUseException;
import javax.comm.SerialPort;
import javax.comm.UnsupportedCommOperationException;

import java.nio.*;
//import SerialPort.SerialPort;


public class IMUReader implements Runnable {

	
	private int[]   data;
	private int     dataSize;
	private boolean running;
	private boolean started;
	
	private SerialPort serial;
	
	
	public final static char    START_CHAR = 'S';
	public final static char    END_CHAR = 'E';
	
	private Thread readThread;
	
	public IMUReader(int dataSize) {
		this.dataSize = dataSize;
		this.started = false;
		
	}
	
	public synchronized void start(String serialPortName) {
		CommPortIdentifier port = this.getPortByName(serialPortName);
		
		try {
		//	System.out.println("in");
			this.serial = (SerialPort) port.open("name", 1500);
			this.serial.setSerialPortParams(115200, SerialPort.DATABITS_8, SerialPort.STOPBITS_1, SerialPort.PARITY_NONE);

			this.readThread = new Thread(this,"IMU-READER");
			this.running = true;
		//	System.out.println("runn");
		//	serialWrite(100);
			
			this.readThread.start();
			
		} catch (PortInUseException e) {
			System.out.println("PORT " + serialPortName + " IS IN USE");
			return;
		} catch (UnsupportedCommOperationException e) {
			return;
		}  
		    
		
	}
	
	
	private CommPortIdentifier getPortByName(String name) {
	    Enumeration ports = CommPortIdentifier.getPortIdentifiers();
	    
	    while (ports.hasMoreElements()) {
	      CommPortIdentifier port = (CommPortIdentifier)ports.nextElement();	 
	      if (port.getPortType() == CommPortIdentifier.PORT_SERIAL && port.getName().equals(name)) 
	    	  return port;
	      
	    }
	    
	    System.out.println("ERROR!! UNABLE TO FIND PORT "+name);
	    return null;
	}
	
	public int[] getLastData() {
		 synchronized (this.data) {
				return this.data;			
		}
	}
	
	public void stop() {
		this.running = false;
		this.serial.close();
	}
	
	private void serialWrite(int data) {
		try {
			serial.getOutputStream().write(data);
			
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
	}
	@Override
	public void run() {
		// TODO Auto-generated method stub
		int data_in;
		
		InputStream inStream = null;
		try {
			inStream = this.serial.getInputStream();
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			System.out.println("ERROR WITH SERIAL PORT STREAM");
		}
		
		
		System.out.println("Starting data reception");

		byte[] dati = new byte[2*this.dataSize + 1 ];
		int ricevuti;
		this.started = true;
		this.data = new int[dataSize];
		
		while (this.running) {
			try {
				while(inStream.read()!=((int)START_CHAR) && this.running);
				ricevuti = 0;			
				/*while (ricevuti< 2*this.dataSize ) {
					dati[ricevuti] = (byte) (((byte) inStream.read()));
					ricevuti += 1;
				}*/
				inStream.read(dati, 0, 2*this.dataSize + 1 );
				//System.out.println(byteToString(dati));
		
				if (dati[2*this.dataSize] == IMUReader.END_CHAR) {			
					synchronized (this.data) {		
						//this.data = new int[dataSize];
					
						for (int i=0;i<dataSize;i++) 
							this.data[i] = ( intFromTwoByteArray(dati[2*i], dati[2*i+1]) ) ;
				
					}
				} else 
						System.out.println("Invalid Sequence");
				
				
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		System.out.println("USCITO!");
	}

	
	public static  String intToString(int[] bytes) {
		String out = "--";
		for (int i=0;i<bytes.length;i++) {
			out += (bytes[i]) + "\n";
		}
		return out;			
	}
	
	public synchronized boolean isReady()  {
		return this.started;
	}
	private static String byteToString(byte[] bytes) {
		String out = "--";
		for (int i=0;i<bytes.length;i++) {
			out += bytes[i] + "\n";
		}
		return out;			
	}
	
	public  int[] getData() {
		synchronized (this.data) {
			return this.data;
		}
	}
	
	private int intFromTwoByteArray(byte byteOne , byte byteTwo ) {
		byte[] arr = {byteTwo, byteOne };
		ByteBuffer wrapped = ByteBuffer.wrap(arr); // big-endian by default
		return (int) wrapped.getShort(); // 1
	}
	
	

}
